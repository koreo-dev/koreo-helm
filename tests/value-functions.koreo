apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: config-test.v1
spec:
  preconditions:
  - assert: =inputs.validators.skip
    skip:
      message: skip message

  - assert: =inputs.validators.depSkip
    depSkip:
      message: depSkip message

  - assert: =inputs.validators.permFail
    permFail:
      message: permFail message

  - assert: =inputs.validators.retry
    retry:
      message: retry message
      delay: 13

  # - assert: =inputs.validators.ok
  #   ok: {}

  locals:
    computed: =inputs.values.string + " local computed"

  return:
    string: =inputs.values.string
    int: =inputs.values.int
    local_computed: =locals.computed
    use_default: =inputs.use_default
    skips: =inputs.optional_skips
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: return-test.v1
spec:
  return:
    a_string: =inputs.string + " string"
    an_int: =inputs.int + 8
    nested:
        a_string: =inputs.string + " nested string"
        an_int: =inputs.int + 17
    bools:
      true: =true
      false: =false
    empties:
      emptyMap: {}
      emptyList: []
      none: null
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: resource-user-test.v1
  namespace: default
spec:
  return:
    int: =inputs.computedInt
    ref: =inputs.resourceRef
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: maybe-or-default-config-test.v1
spec:
  return:
    use_default: =inputs.parent.use_default
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: maybe-return-value.v1
spec:
  preconditions:
  - assert: =inputs.use_default
    skip:
      message: Using default, per your request.
  return:
    value: =inputs.value
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: maybe-default-return-value.v1
spec:
  preconditions:
  - assert: =!inputs.use_default
    skip:
      message: Using non-default
  return:
    value: =inputs.value
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: optional-skip-config.v1
spec:
  return:
    skips: =inputs.parent.skips
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: maybe-skip.v1
spec:
  preconditions:
  - assert: =inputs.should_skip
    skip:
      message: Skipping per your request
  return:
    value: =inputs.name
---
apiVersion: koreo.dev/v1beta1
kind: ValueFunction
metadata:
  name: combine-optional-skips.v1
spec:
  return:
    not_skipped: =inputs.optionals.map(key, key)
